
byu014_lnguy089_lab6_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000350  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000937  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000805  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038a  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  00001f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	0e c1       	rjmp	.+540    	; 0x252 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	28 d1       	rcall	.+592    	; 0x314 <main>
  c4:	43 c1       	rjmp	.+646    	; 0x34c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Tick>:
}

void TimerOff()
{
	TimerFlag = 1;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
  d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <state+0x1>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 05       	cpc	r25, r1
  dc:	69 f0       	breq	.+26     	; 0xf8 <Tick+0x30>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	18 f0       	brcs	.+6      	; 0xea <Tick+0x22>
  e4:	02 97       	sbiw	r24, 0x02	; 2
  e6:	71 f0       	breq	.+28     	; 0x104 <Tick+0x3c>
  e8:	14 c0       	rjmp	.+40     	; 0x112 <Tick+0x4a>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <state+0x1>
  f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
  f6:	0d c0       	rjmp	.+26     	; 0x112 <Tick+0x4a>
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <state+0x1>
 100:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <state+0x1>
 10c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 110:	00 00       	nop
 112:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 116:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <state+0x1>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	91 05       	cpc	r25, r1
 11e:	31 f0       	breq	.+12     	; 0x12c <Tick+0x64>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	91 05       	cpc	r25, r1
 124:	08 f1       	brcs	.+66     	; 0x168 <Tick+0xa0>
 126:	02 97       	sbiw	r24, 0x02	; 2
 128:	59 f0       	breq	.+22     	; 0x140 <Tick+0x78>
 12a:	1f c0       	rjmp	.+62     	; 0x16a <Tick+0xa2>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempC>
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <tempC>
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	15 c0       	rjmp	.+42     	; 0x16a <Tick+0xa2>
 140:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tempC>
 144:	84 30       	cpi	r24, 0x04	; 4
 146:	21 f4       	brne	.+8      	; 0x150 <Tick+0x88>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempC>
 14e:	05 c0       	rjmp	.+10     	; 0x15a <Tick+0x92>
 150:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tempC>
 154:	88 0f       	add	r24, r24
 156:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempC>
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <tempC>
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
 166:	01 c0       	rjmp	.+2      	; 0x16a <Tick+0xa2>
 168:	00 00       	nop
 16a:	00 00       	nop
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <TimerOn>:
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	81 e8       	ldi	r24, 0x81	; 129
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	2b e0       	ldi	r18, 0x0B	; 11
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	88 e8       	ldi	r24, 0x88	; 136
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	2d e7       	ldi	r18, 0x7D	; 125
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	31 83       	std	Z+1, r19	; 0x01
 190:	20 83       	st	Z, r18
 192:	8f e6       	ldi	r24, 0x6F	; 111
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	22 e0       	ldi	r18, 0x02	; 2
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	84 e8       	ldi	r24, 0x84	; 132
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fc 01       	movw	r30, r24
 1a2:	11 82       	std	Z+1, r1	; 0x01
 1a4:	10 82       	st	Z, r1
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ae:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1b2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 1ba:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 1be:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 1c2:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 1c6:	8f e5       	ldi	r24, 0x5F	; 95
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2f e5       	ldi	r18, 0x5F	; 95
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	20 68       	ori	r18, 0x80	; 128
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
 1d8:	00 00       	nop
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <TimerSet>:



void TimerSet(unsigned long M)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	00 d0       	rcall	.+0      	; 0x1e6 <TimerSet+0x6>
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <TimerSet+0x8>
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	69 83       	std	Y+1, r22	; 0x01
 1ee:	7a 83       	std	Y+2, r23	; 0x02
 1f0:	8b 83       	std	Y+3, r24	; 0x03
 1f2:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	ab 81       	ldd	r26, Y+3	; 0x03
 1fa:	bc 81       	ldd	r27, Y+4	; 0x04
 1fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 200:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 204:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 208:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 210:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 214:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 218:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 21c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 220:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 224:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 228:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
}
 22c:	00 00       	nop
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <TimerISR>:

void TimerISR()
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 24a:	00 00       	nop
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 262:	0f 92       	push	r0
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 284:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 288:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 28c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 290:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	a1 09       	sbc	r26, r1
 298:	b1 09       	sbc	r27, r1
 29a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 29e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 2a2:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 2a6:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 2aa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 2ae:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 2b2:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 2b6:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 2ba:	89 2b       	or	r24, r25
 2bc:	8a 2b       	or	r24, r26
 2be:	8b 2b       	or	r24, r27
 2c0:	89 f4       	brne	.+34     	; 0x2e4 <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 2c2:	bc df       	rcall	.-136    	; 0x23c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2d4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 2d8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 2dc:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 2e0:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	}
}
 2e4:	00 00       	nop
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 308:	0f 90       	pop	r0
 30a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <main>:


int main(void)
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRC = 0xFF;
 31c:	87 e2       	ldi	r24, 0x27	; 39
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
	PORTC = 0x00;
 326:	88 e2       	ldi	r24, 0x28	; 40
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	10 82       	st	Z, r1
	TimerSet(1000);
 32e:	68 ee       	ldi	r22, 0xE8	; 232
 330:	73 e0       	ldi	r23, 0x03	; 3
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	54 df       	rcall	.-344    	; 0x1e0 <TimerSet>
	TimerOn();
 338:	1c df       	rcall	.-456    	; 0x172 <TimerOn>
	
    while (1) 
    {
		Tick();
 33a:	c6 de       	rcall	.-628    	; 0xc8 <Tick>
 33c:	00 00       	nop
		while(!TimerFlag);
 33e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 342:	88 23       	and	r24, r24
 344:	e1 f3       	breq	.-8      	; 0x33e <main+0x2a>
 346:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		TimerFlag = 0;
 34a:	f7 cf       	rjmp	.-18     	; 0x33a <main+0x26>

0000034c <_exit>:
    }
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
