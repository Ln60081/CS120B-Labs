
byu014_lnguy089_lab4_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bd  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 30       	cpi	r26, 0x07	; 7
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	71 d1       	rcall	.+738    	; 0x38c <main>
  aa:	90 c1       	rjmp	.+800    	; 0x3cc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
unsigned char tempB;
unsigned char tempC;
enum States next;

void Tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	tempA = PINA;
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	80 81       	ld	r24, Z
  be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempA>
	tempB = PINB;
  c2:	83 e2       	ldi	r24, 0x23	; 35
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	switch(state)
  ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <Tick+0x30>
  dc:	51 c0       	rjmp	.+162    	; 0x180 <Tick+0xd2>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	28 f4       	brcc	.+10     	; 0xee <Tick+0x40>
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	71 f0       	breq	.+28     	; 0x104 <Tick+0x56>
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	39 f1       	breq	.+78     	; 0x13a <Tick+0x8c>
				state = wait;
			}
			break;
			
		default:
			break;
  ec:	ce c0       	rjmp	.+412    	; 0x28a <Tick+0x1dc>

void Tick()
{
	tempA = PINA;
	tempB = PINB;
	switch(state)
  ee:	84 30       	cpi	r24, 0x04	; 4
  f0:	91 05       	cpc	r25, r1
  f2:	09 f4       	brne	.+2      	; 0xf6 <Tick+0x48>
  f4:	9c c0       	rjmp	.+312    	; 0x22e <Tick+0x180>
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	91 05       	cpc	r25, r1
  fa:	08 f4       	brcc	.+2      	; 0xfe <Tick+0x50>
  fc:	64 c0       	rjmp	.+200    	; 0x1c6 <Tick+0x118>
  fe:	05 97       	sbiw	r24, 0x05	; 5
 100:	41 f0       	breq	.+16     	; 0x112 <Tick+0x64>
				state = wait;
			}
			break;
			
		default:
			break;
 102:	c3 c0       	rjmp	.+390    	; 0x28a <Tick+0x1dc>
	tempA = PINA;
	tempB = PINB;
	switch(state)
	{
		case Start:
			state = locked1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 10c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 110:	bc c0       	rjmp	.+376    	; 0x28a <Tick+0x1dc>
		
		case wait:
			if(tempA == 0x00)
 112:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 116:	88 23       	and	r24, r24
 118:	49 f4       	brne	.+18     	; 0x12c <Tick+0x7e>
			{
				state = next;
 11a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <next>
 11e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <next+0x1>
 122:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 126:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			else
			{
				state = wait;
			}
			break;
 12a:	af c0       	rjmp	.+350    	; 0x28a <Tick+0x1dc>
			{
				state = next;
			}
			else
			{
				state = wait;
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 134:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			break;
 138:	a8 c0       	rjmp	.+336    	; 0x28a <Tick+0x1dc>
			
		case locked1:
			if(tempA == 0x04)
 13a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	69 f4       	brne	.+26     	; 0x15c <Tick+0xae>
			{
				state = wait;
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 14a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
				next = locked2;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <next+0x1>
 156:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <next>
			}
			else
			{
				state = locked1;
			}
			break;
 15a:	97 c0       	rjmp	.+302    	; 0x28a <Tick+0x1dc>
			if(tempA == 0x04)
			{
				state = wait;
				next = locked2;
			}
			else if(tempA == 0x00)
 15c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 160:	88 23       	and	r24, r24
 162:	39 f4       	brne	.+14     	; 0x172 <Tick+0xc4>
			{
				state = locked1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 16c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			else
			{
				state = locked1;
			}
			break;
 170:	8c c0       	rjmp	.+280    	; 0x28a <Tick+0x1dc>
			{
				state = locked1;
			}
			else
			{
				state = locked1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 17a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			break;
 17e:	85 c0       	rjmp	.+266    	; 0x28a <Tick+0x1dc>
			
		case locked2:
			if(tempA == 0x02)
 180:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	39 f4       	brne	.+14     	; 0x196 <Tick+0xe8>
			{
				state = unlocked1;
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			else
			{
				state = wait;
				next = locked1;
			}
			break;
 194:	7a c0       	rjmp	.+244    	; 0x28a <Tick+0x1dc>
		case locked2:
			if(tempA == 0x02)
			{
				state = unlocked1;
			}
			else if(tempA == 0x00)
 196:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 19a:	88 23       	and	r24, r24
 19c:	39 f4       	brne	.+14     	; 0x1ac <Tick+0xfe>
			{
				state = locked2;
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 1a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			else
			{
				state = wait;
				next = locked1;
			}
			break;
 1aa:	6f c0       	rjmp	.+222    	; 0x28a <Tick+0x1dc>
			{
				state = locked2;
			}
			else
			{
				state = wait;
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 1b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
				next = locked1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <next+0x1>
 1c0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <next>
			}
			break;
 1c4:	62 c0       	rjmp	.+196    	; 0x28a <Tick+0x1dc>
		
		case unlocked1:
			if(tempA == 0x80)
 1c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 1ca:	80 38       	cpi	r24, 0x80	; 128
 1cc:	69 f4       	brne	.+26     	; 0x1e8 <Tick+0x13a>
			{
				next = locked1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <next+0x1>
 1d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <next>
				state = wait;
 1da:	85 e0       	ldi	r24, 0x05	; 5
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 1e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			else
			{
				state = unlocked1;
			}
			break;
 1e6:	51 c0       	rjmp	.+162    	; 0x28a <Tick+0x1dc>
			if(tempA == 0x80)
			{
				next = locked1;
				state = wait;
			}
			else if(tempA == 0x04)
 1e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	69 f4       	brne	.+26     	; 0x20a <Tick+0x15c>
			{
				next = unlocked2;
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <next+0x1>
 1f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <next>
				state = wait;
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 204:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			else
			{
				state = unlocked1;
			}
			break;
 208:	40 c0       	rjmp	.+128    	; 0x28a <Tick+0x1dc>
			else if(tempA == 0x04)
			{
				next = unlocked2;
				state = wait;
			}
			else if(tempA == 0x00)
 20a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 20e:	88 23       	and	r24, r24
 210:	39 f4       	brne	.+14     	; 0x220 <Tick+0x172>
			{
				state = unlocked1;
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 21a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			else
			{
				state = unlocked1;
			}
			break;
 21e:	35 c0       	rjmp	.+106    	; 0x28a <Tick+0x1dc>
			{
				state = unlocked1;
			}
			else
			{
				state = unlocked1;
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 228:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			break;
 22c:	2e c0       	rjmp	.+92     	; 0x28a <Tick+0x1dc>
			
		case unlocked2:
			if(tempA == 0x80)
 22e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 232:	80 38       	cpi	r24, 0x80	; 128
 234:	39 f4       	brne	.+14     	; 0x244 <Tick+0x196>
			{
				state = locked1;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 23e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			else
			{
				next = unlocked1;
				state = wait;
			}
			break;
 242:	22 c0       	rjmp	.+68     	; 0x288 <Tick+0x1da>
		case unlocked2:
			if(tempA == 0x80)
			{
				state = locked1;
			}
			else if(tempA == 0x02)
 244:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	39 f4       	brne	.+14     	; 0x25a <Tick+0x1ac>
			{
				state = locked1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 254:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			else
			{
				next = unlocked1;
				state = wait;
			}
			break;
 258:	17 c0       	rjmp	.+46     	; 0x288 <Tick+0x1da>
			}
			else if(tempA == 0x02)
			{
				state = locked1;
			}
			else if(tempA == 0x00)
 25a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempA>
 25e:	88 23       	and	r24, r24
 260:	39 f4       	brne	.+14     	; 0x270 <Tick+0x1c2>
			{
				state = unlocked2;
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 26a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			else
			{
				next = unlocked1;
				state = wait;
			}
			break;
 26e:	0c c0       	rjmp	.+24     	; 0x288 <Tick+0x1da>
			{
				state = unlocked2;
			}
			else
			{
				next = unlocked1;
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <next+0x1>
 278:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <next>
				state = wait;
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 284:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			break;
 288:	00 00       	nop
			
		default:
			break;
	}
	
	switch(state)
 28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 28e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	91 05       	cpc	r25, r1
 296:	a1 f1       	breq	.+104    	; 0x300 <Tick+0x252>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	91 05       	cpc	r25, r1
 29c:	30 f4       	brcc	.+12     	; 0x2aa <Tick+0x1fc>
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <Tick+0x1f6>
 2a2:	6f c0       	rjmp	.+222    	; 0x382 <Tick+0x2d4>
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	b9 f0       	breq	.+46     	; 0x2d6 <Tick+0x228>
			tempC = state;
			PORTC = tempC;
			break;
			
		default:
			break;
 2a8:	6d c0       	rjmp	.+218    	; 0x384 <Tick+0x2d6>
			
		default:
			break;
	}
	
	switch(state)
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	91 05       	cpc	r25, r1
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <Tick+0x204>
 2b0:	52 c0       	rjmp	.+164    	; 0x356 <Tick+0x2a8>
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	91 05       	cpc	r25, r1
 2b6:	c8 f1       	brcs	.+114    	; 0x32a <Tick+0x27c>
 2b8:	05 97       	sbiw	r24, 0x05	; 5
 2ba:	09 f0       	breq	.+2      	; 0x2be <Tick+0x210>
			tempC = state;
			PORTC = tempC;
			break;
			
		default:
			break;
 2bc:	63 c0       	rjmp	.+198    	; 0x384 <Tick+0x2d6>
	{
		case Start:
			break;
			
		case wait:
			tempC = state;
 2be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 2c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 2c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tempC>
			PORTC = tempC;
 2ca:	88 e2       	ldi	r24, 0x28	; 40
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tempC>
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
		
		case locked1:
			tempB = 0x0;
 2d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = tempB;
 2da:	85 e2       	ldi	r24, 0x25	; 37
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
			tempC = state;
 2e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 2ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 2ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tempC>
			PORTC = tempC;
 2f2:	88 e2       	ldi	r24, 0x28	; 40
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tempC>
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
			break;
 2fe:	42 c0       	rjmp	.+132    	; 0x384 <Tick+0x2d6>
		
		case locked2:
			tempB = 0x0;
 300:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = tempB;
 304:	85 e2       	ldi	r24, 0x25	; 37
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
			tempC = state;
 310:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 314:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 318:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tempC>
			PORTC = tempC;
 31c:	88 e2       	ldi	r24, 0x28	; 40
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tempC>
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
			break;
 328:	2d c0       	rjmp	.+90     	; 0x384 <Tick+0x2d6>
		
		case unlocked1:
			tempB = 0x1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTB = tempB;
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
			tempC = state;
 33c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 340:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 344:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tempC>
			PORTC = tempC;
 348:	88 e2       	ldi	r24, 0x28	; 40
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tempC>
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
			break;
 354:	17 c0       	rjmp	.+46     	; 0x384 <Tick+0x2d6>
			
		case unlocked2:
			tempB = 0x1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTB = tempB;
 35c:	85 e2       	ldi	r24, 0x25	; 37
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
			tempC = state;
 368:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 36c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 370:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tempC>
			PORTC = tempC;
 374:	88 e2       	ldi	r24, 0x28	; 40
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tempC>
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
			break;
 380:	01 c0       	rjmp	.+2      	; 0x384 <Tick+0x2d6>
	}
	
	switch(state)
	{
		case Start:
			break;
 382:	00 00       	nop
			break;
		
		
			
	}
}
 384:	00 00       	nop
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <main>:
int main(void)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRA = 0x00; PORTA = 0x00;
 394:	81 e2       	ldi	r24, 0x21	; 33
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	fc 01       	movw	r30, r24
 39a:	10 82       	st	Z, r1
 39c:	82 e2       	ldi	r24, 0x22	; 34
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	fc 01       	movw	r30, r24
 3a2:	10 82       	st	Z, r1
	DDRB = 0xF; PORTB = 0x0;
 3a4:	84 e2       	ldi	r24, 0x24	; 36
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	2f e0       	ldi	r18, 0x0F	; 15
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 83       	st	Z, r18
 3ae:	85 e2       	ldi	r24, 0x25	; 37
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	fc 01       	movw	r30, r24
 3b4:	10 82       	st	Z, r1
	DDRC = 0xF; PORTC = 0x0;
 3b6:	87 e2       	ldi	r24, 0x27	; 39
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	2f e0       	ldi	r18, 0x0F	; 15
 3bc:	fc 01       	movw	r30, r24
 3be:	20 83       	st	Z, r18
 3c0:	88 e2       	ldi	r24, 0x28	; 40
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	fc 01       	movw	r30, r24
 3c6:	10 82       	st	Z, r1
    while (1) 
    {
		Tick();
 3c8:	72 de       	rcall	.-796    	; 0xae <Tick>
    }
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <main+0x3c>

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
