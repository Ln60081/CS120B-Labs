
byu014_lnguy089_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ae  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f1  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	71 00       	.word	0x0071	; ????
  8e:	75 00       	.word	0x0075	; ????
  90:	79 00       	.word	0x0079	; ????
  92:	7d 00       	.word	0x007d	; ????
  94:	81 00       	.word	0x0081	; ????
  96:	8d 00       	.word	0x008d	; ????
  98:	99 00       	.word	0x0099	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a3 30       	cpi	r26, 0x03	; 3
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	62 d0       	rcall	.+196    	; 0x17c <main>
  b8:	73 c0       	rjmp	.+230    	; 0x1a0 <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <Tick>:
char unsigned tempA;
char unsigned tempC;

void Tick()
{
	tempA = ~PINA & 0x3;
  bc:	80 b1       	in	r24, 0x00	; 0
  be:	80 95       	com	r24
  c0:	83 70       	andi	r24, 0x03	; 3
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	tempC = PORTC;
  c6:	98 b1       	in	r25, 0x08	; 8
  c8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <tempC>
	switch(state)
  cc:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <state>
  d0:	42 2f       	mov	r20, r18
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	47 30       	cpi	r20, 0x07	; 7
  d6:	51 05       	cpc	r21, r1
  d8:	80 f5       	brcc	.+96     	; 0x13a <Tick+0x7e>
  da:	fa 01       	movw	r30, r20
  dc:	ea 5b       	subi	r30, 0xBA	; 186
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	56 c0       	rjmp	.+172    	; 0x18e <__tablejump2__>
	{
		case Start:
			state = init;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  e8:	33 c0       	rjmp	.+102    	; 0x150 <Tick+0x94>
			break;
			
		case init:
			state = wait;
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
  f0:	08 95       	ret
		
		case inc:
			state = wait;
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
  f8:	08 95       	ret
		
		case dec:
			state = wait;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 100:	08 95       	ret
			
		case wait:
			if(tempA == 0x3)
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	21 f4       	brne	.+8      	; 0x10e <Tick+0x52>
			{
				state = zero;
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 10c:	33 c0       	rjmp	.+102    	; 0x174 <Tick+0xb8>
				break;
			}
			if(tempA != 0x0)
 10e:	81 11       	cpse	r24, r1
 110:	34 c0       	rjmp	.+104    	; 0x17a <Tick+0xbe>
			{
				state = wait;
			}
			else
			{
				state = ready;
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 118:	08 95       	ret
			}
			break;
		
		case ready:
			if(tempA == 0x1)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	21 f4       	brne	.+8      	; 0x126 <Tick+0x6a>
			{
				state = inc;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 124:	19 c0       	rjmp	.+50     	; 0x158 <Tick+0x9c>
			}
			else if(tempA == 0x2)
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	41 f5       	brne	.+80     	; 0x17a <Tick+0xbe>
			{
				state = dec;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 130:	1a c0       	rjmp	.+52     	; 0x166 <Tick+0xaa>
			}
			break;
			
		
		case zero:
			state = wait;
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 138:	08 95       	ret
		
		default:
			break;
	}
	
	switch(state)
 13a:	22 30       	cpi	r18, 0x02	; 2
 13c:	69 f0       	breq	.+26     	; 0x158 <Tick+0x9c>
 13e:	18 f4       	brcc	.+6      	; 0x146 <Tick+0x8a>
 140:	21 30       	cpi	r18, 0x01	; 1
 142:	d9 f4       	brne	.+54     	; 0x17a <Tick+0xbe>
 144:	05 c0       	rjmp	.+10     	; 0x150 <Tick+0x94>
 146:	23 30       	cpi	r18, 0x03	; 3
 148:	71 f0       	breq	.+28     	; 0x166 <Tick+0xaa>
 14a:	26 30       	cpi	r18, 0x06	; 6
 14c:	99 f0       	breq	.+38     	; 0x174 <Tick+0xb8>
 14e:	08 95       	ret
	{
		case Start:
			break;
			
		case init:
			tempC = 0;
 150:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempC>
			PORTC = tempC;
 154:	18 b8       	out	0x08, r1	; 8
			break;
 156:	08 95       	ret
			
		case inc:
			if(tempC < 9)
 158:	99 30       	cpi	r25, 0x09	; 9
 15a:	78 f4       	brcc	.+30     	; 0x17a <Tick+0xbe>
			{
				tempC += 1;
 15c:	9f 5f       	subi	r25, 0xFF	; 255
 15e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <tempC>
				PORTC = tempC;
 162:	98 b9       	out	0x08, r25	; 8
 164:	08 95       	ret
			}
			break;
		
		case dec:
			if(tempC > 0)
 166:	99 23       	and	r25, r25
 168:	41 f0       	breq	.+16     	; 0x17a <Tick+0xbe>
			{
				tempC -= 1;
 16a:	91 50       	subi	r25, 0x01	; 1
 16c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <tempC>
				PORTC = tempC;
 170:	98 b9       	out	0x08, r25	; 8
 172:	08 95       	ret
		
		case wait:
			break;
		
		case zero:
			tempC = 0;
 174:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempC>
			PORTC = 0;
 178:	18 b8       	out	0x08, r1	; 8
 17a:	08 95       	ret

0000017c <main>:
	}
}

int main(void)
{
	DDRA = 0x0; PORTA = 0xF;
 17c:	11 b8       	out	0x01, r1	; 1
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xF; PORTC = 0x0;
 182:	87 b9       	out	0x07, r24	; 7
 184:	18 b8       	out	0x08, r1	; 8
	state = Start;
 186:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
    /* Replace with your application code */
    while (1) 
    {
		Tick();
 18a:	98 df       	rcall	.-208    	; 0xbc <Tick>
 18c:	fe cf       	rjmp	.-4      	; 0x18a <main+0xe>

0000018e <__tablejump2__>:
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	00 24       	eor	r0, r0
 194:	00 1c       	adc	r0, r0
 196:	0b be       	out	0x3b, r0	; 59
 198:	07 90       	elpm	r0, Z+
 19a:	f6 91       	elpm	r31, Z
 19c:	e0 2d       	mov	r30, r0
 19e:	09 94       	ijmp

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
