
byu014_lnguy089_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c6  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000321  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6f 00       	.word	0x006f	; ????
  8e:	73 00       	.word	0x0073	; ????
  90:	79 00       	.word	0x0079	; ????
  92:	7d 00       	.word	0x007d	; ????
  94:	87 00       	.word	0x0087	; ????
  96:	83 00       	.word	0x0083	; ????
  98:	87 00       	.word	0x0087	; ????
  9a:	8b 00       	.word	0x008b	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a4 30       	cpi	r26, 0x04	; 4
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	7c d0       	rcall	.+248    	; 0x1b2 <main>
  ba:	8c c0       	rjmp	.+280    	; 0x1d4 <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <Tick>:
unsigned char tempC = 0x00;
unsigned char counter = 0;

void Tick()
{
	tempA = ~PINA;
  be:	80 b1       	in	r24, 0x00	; 0
  c0:	80 95       	com	r24
  c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempA>
	switch(state)
  c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state>
  ca:	49 2f       	mov	r20, r25
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	48 30       	cpi	r20, 0x08	; 8
  d0:	51 05       	cpc	r21, r1
  d2:	08 f0       	brcs	.+2      	; 0xd6 <Tick+0x18>
  d4:	45 c0       	rjmp	.+138    	; 0x160 <Tick+0xa2>
  d6:	fa 01       	movw	r30, r20
  d8:	ea 5b       	subi	r30, 0xBA	; 186
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	72 c0       	rjmp	.+228    	; 0x1c2 <__tablejump2__>
	{
		case start:
			state = off;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
  e4:	4a c0       	rjmp	.+148    	; 0x17a <Tick+0xbc>
		
		case off:
			if(tempA & 0x1)
  e6:	80 ff       	sbrs	r24, 0
  e8:	48 c0       	rjmp	.+144    	; 0x17a <Tick+0xbc>
			{
				state = init;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
  f0:	48 c0       	rjmp	.+144    	; 0x182 <Tick+0xc4>
				state = off;
			}
			break;
		
		case init:
			state = wait;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
  f8:	08 95       	ret
		
		case wait:
			if(tempA & 0x1)
  fa:	80 fd       	sbrc	r24, 0
  fc:	59 c0       	rjmp	.+178    	; 0x1b0 <Tick+0xf2>
			{
				state = wait;
			}
			else
			{
				state = ready;
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
 104:	08 95       	ret
			}	
			break;
		
		case init2:
			state = wait;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 10c:	08 95       	ret
			
		case blink:
			state = wait;
		case shift:
			state = wait;
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 114:	08 95       	ret
		
		case ready:
			if(tempA & 0x1)
 116:	80 ff       	sbrs	r24, 0
 118:	4b c0       	rjmp	.+150    	; 0x1b0 <Tick+0xf2>
			{
				if(counter < 6)
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	86 30       	cpi	r24, 0x06	; 6
 120:	38 f4       	brcc	.+14     	; 0x130 <Tick+0x72>
				{
					counter += 1;
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					state = shift;
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
 12e:	2e c0       	rjmp	.+92     	; 0x18c <Tick+0xce>
				}
				else if(counter == 6)
 130:	86 30       	cpi	r24, 0x06	; 6
 132:	39 f4       	brne	.+14     	; 0x142 <Tick+0x84>
				{
					counter += 1;
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					state = init2;
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
 140:	2c c0       	rjmp	.+88     	; 0x19a <Tick+0xdc>
				}
				else if(counter < 12)
 142:	8c 30       	cpi	r24, 0x0C	; 12
 144:	38 f4       	brcc	.+14     	; 0x154 <Tick+0x96>
				{
					counter += 1;
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					state = blink;
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
 152:	28 c0       	rjmp	.+80     	; 0x1a4 <Tick+0xe6>
				}
				else
				{
					counter = 0;
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
					state = off;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
 15e:	0d c0       	rjmp	.+26     	; 0x17a <Tick+0xbc>
			}
			
			default:
				break;
	}
	switch(state)
 160:	94 30       	cpi	r25, 0x04	; 4
 162:	a1 f0       	breq	.+40     	; 0x18c <Tick+0xce>
 164:	28 f4       	brcc	.+10     	; 0x170 <Tick+0xb2>
 166:	91 30       	cpi	r25, 0x01	; 1
 168:	41 f0       	breq	.+16     	; 0x17a <Tick+0xbc>
 16a:	92 30       	cpi	r25, 0x02	; 2
 16c:	09 f5       	brne	.+66     	; 0x1b0 <Tick+0xf2>
 16e:	09 c0       	rjmp	.+18     	; 0x182 <Tick+0xc4>
 170:	95 30       	cpi	r25, 0x05	; 5
 172:	99 f0       	breq	.+38     	; 0x19a <Tick+0xdc>
 174:	96 30       	cpi	r25, 0x06	; 6
 176:	b1 f0       	breq	.+44     	; 0x1a4 <Tick+0xe6>
 178:	08 95       	ret
	{
		case start:
			break;
		
		case off:
			tempC = 0x00;
 17a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tempC>
			PORTC = tempC;
 17e:	18 b8       	out	0x08, r1	; 8
			break;
 180:	08 95       	ret
		
		case init:
			tempC = 0x2A;// 2A
 182:	8a e2       	ldi	r24, 0x2A	; 42
 184:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempC>
			PORTC = tempC;
 188:	88 b9       	out	0x08, r24	; 8
			break;
 18a:	08 95       	ret
		
		case wait:
			break;
		
		case shift:
			tempC = ~tempC;
 18c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempC>
 190:	80 95       	com	r24
 192:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempC>
			PORTC = tempC;
 196:	88 b9       	out	0x08, r24	; 8
			break;
 198:	08 95       	ret
		
		case init2:
			tempC = 0xFF;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempC>
			PORTC = tempC;
 1a0:	88 b9       	out	0x08, r24	; 8
			break;
 1a2:	08 95       	ret
		
		case blink:
			tempC = ~tempC;
 1a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempC>
 1a8:	80 95       	com	r24
 1aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempC>
			PORTC = tempC;
 1ae:	88 b9       	out	0x08, r24	; 8
 1b0:	08 95       	ret

000001b2 <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRA = 0x0; PORTA = 0xF;
 1b2:	11 b8       	out	0x01, r1	; 1
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	87 b9       	out	0x07, r24	; 7
 1bc:	18 b8       	out	0x08, r1	; 8
    while (1) 
    {
		Tick();
 1be:	7f df       	rcall	.-258    	; 0xbe <Tick>
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <main+0xc>

000001c2 <__tablejump2__>:
 1c2:	ee 0f       	add	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	00 24       	eor	r0, r0
 1c8:	00 1c       	adc	r0, r0
 1ca:	0b be       	out	0x3b, r0	; 59
 1cc:	07 90       	elpm	r0, Z+
 1ce:	f6 91       	elpm	r31, Z
 1d0:	e0 2d       	mov	r30, r0
 1d2:	09 94       	ijmp

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
