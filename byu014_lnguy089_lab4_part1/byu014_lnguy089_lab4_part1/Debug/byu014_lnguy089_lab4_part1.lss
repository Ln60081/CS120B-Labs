
byu014_lnguy089_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a3  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000349  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ad d0       	rcall	.+346    	; 0x21e <main>
  c4:	c7 c0       	rjmp	.+398    	; 0x254 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Tick>:
unsigned char tempA;
unsigned char tempB = 0x0;
unsigned char flag = 1;

void Tick()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	tempA = PINA;
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tempA>
	switch(state)
  dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
  e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state+0x1>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	91 05       	cpc	r25, r1
  e8:	d9 f0       	breq	.+54     	; 0x120 <Tick+0x58>
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	91 05       	cpc	r25, r1
  ee:	28 f4       	brcc	.+10     	; 0xfa <Tick+0x32>
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	49 f0       	breq	.+18     	; 0x106 <Tick+0x3e>
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	71 f0       	breq	.+28     	; 0x114 <Tick+0x4c>
			{
				state = wait;
			}
			break;
		default:
			break;
  f8:	4f c0       	rjmp	.+158    	; 0x198 <Tick+0xd0>
unsigned char flag = 1;

void Tick()
{
	tempA = PINA;
	switch(state)
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	91 05       	cpc	r25, r1
  fe:	b9 f0       	breq	.+46     	; 0x12e <Tick+0x66>
 100:	04 97       	sbiw	r24, 0x04	; 4
 102:	e1 f0       	breq	.+56     	; 0x13c <Tick+0x74>
			{
				state = wait;
			}
			break;
		default:
			break;
 104:	49 c0       	rjmp	.+146    	; 0x198 <Tick+0xd0>
{
	tempA = PINA;
	switch(state)
	{
		case Start:
			state = init;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 10e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
			break;
 112:	42 c0       	rjmp	.+132    	; 0x198 <Tick+0xd0>
		
		case init:
			state = wait;
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 11c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
		
		case s0:
			state = wait;
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 128:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
			break;
 12c:	35 c0       	rjmp	.+106    	; 0x198 <Tick+0xd0>
		
		case s1:
			state = wait;
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
			break;
 13a:	2e c0       	rjmp	.+92     	; 0x198 <Tick+0xd0>
			
		case wait:
			if(tempA == 0x0)
 13c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tempA>
 140:	88 23       	and	r24, r24
 142:	11 f4       	brne	.+4      	; 0x148 <Tick+0x80>
			{
				flag = 0;
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			}
			if(flag)
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14c:	88 23       	and	r24, r24
 14e:	09 f5       	brne	.+66     	; 0x192 <Tick+0xca>
			{
				break;
			}
			if(tempA == 0x1)
 150:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tempA>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	b1 f4       	brne	.+44     	; 0x184 <Tick+0xbc>
			{
				if(tempB == 0x2)
 158:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	39 f4       	brne	.+14     	; 0x16e <Tick+0xa6>
				{
					state = s0;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 168:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
			}
			else
			{
				state = wait;
			}
			break;
 16c:	14 c0       	rjmp	.+40     	; 0x196 <Tick+0xce>
			{
				if(tempB == 0x2)
				{
					state = s0;
				}
				else if(tempB == 0x1)
 16e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	81 f4       	brne	.+32     	; 0x196 <Tick+0xce>
				{
					state = s1;
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 17e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
			}
			else
			{
				state = wait;
			}
			break;
 182:	09 c0       	rjmp	.+18     	; 0x196 <Tick+0xce>
					state = s1;
				}
			}
			else
			{
				state = wait;
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 18c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
			}
			break;
 190:	02 c0       	rjmp	.+4      	; 0x196 <Tick+0xce>
			{
				flag = 0;
			}
			if(flag)
			{
				break;
 192:	00 00       	nop
 194:	01 c0       	rjmp	.+2      	; 0x198 <Tick+0xd0>
			}
			else
			{
				state = wait;
			}
			break;
 196:	00 00       	nop
		default:
			break;
	}
	switch(state)
 198:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
 19c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state+0x1>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	91 05       	cpc	r25, r1
 1a4:	d9 f0       	breq	.+54     	; 0x1dc <Tick+0x114>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	91 05       	cpc	r25, r1
 1aa:	28 f4       	brcc	.+10     	; 0x1b6 <Tick+0xee>
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	81 f1       	breq	.+96     	; 0x210 <Tick+0x148>
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <Tick+0xfa>
			PORTB = tempB;
			flag = 1;
			break;
		
		default:
			break;
 1b4:	30 c0       	rjmp	.+96     	; 0x216 <Tick+0x14e>
			}
			break;
		default:
			break;
	}
	switch(state)
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	91 05       	cpc	r25, r1
 1ba:	e9 f0       	breq	.+58     	; 0x1f6 <Tick+0x12e>
 1bc:	04 97       	sbiw	r24, 0x04	; 4
 1be:	51 f1       	breq	.+84     	; 0x214 <Tick+0x14c>
			PORTB = tempB;
			flag = 1;
			break;
		
		default:
			break;
 1c0:	2a c0       	rjmp	.+84     	; 0x216 <Tick+0x14e>
	{
		case Start:
			break;
			
		case init:
			tempB = 0x1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			PORTB = tempB;
 1c8:	85 e2       	ldi	r24, 0x25	; 37
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
			flag = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 1da:	1d c0       	rjmp	.+58     	; 0x216 <Tick+0x14e>
			
		case wait:
			break;
		
		case s0:
			tempB = 0x1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			PORTB = tempB;
 1e2:	85 e2       	ldi	r24, 0x25	; 37
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
			flag = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 1f4:	10 c0       	rjmp	.+32     	; 0x216 <Tick+0x14e>
			
		case s1:
			tempB  = 0x2;
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			PORTB = tempB;
 1fc:	85 e2       	ldi	r24, 0x25	; 37
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
			flag = 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 20e:	03 c0       	rjmp	.+6      	; 0x216 <Tick+0x14e>
			break;
	}
	switch(state)
	{
		case Start:
			break;
 210:	00 00       	nop
 212:	01 c0       	rjmp	.+2      	; 0x216 <Tick+0x14e>
			PORTB = tempB;
			flag = 1;
			break;
			
		case wait:
			break;
 214:	00 00       	nop
		
		default:
			break;
		
	}
}
 216:	00 00       	nop
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <main>:
int main(void)
{
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRA = 0x0; PORTA = 0x0;
 226:	81 e2       	ldi	r24, 0x21	; 33
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	10 82       	st	Z, r1
 22e:	82 e2       	ldi	r24, 0x22	; 34
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	10 82       	st	Z, r1
	DDRB = 0xF; PORTB = 0x0;
 236:	84 e2       	ldi	r24, 0x24	; 36
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	2f e0       	ldi	r18, 0x0F	; 15
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	85 e2       	ldi	r24, 0x25	; 37
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	10 82       	st	Z, r1
	state = Start;
 248:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state+0x1>
 24c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state>
	
    while (1) 
    {
		Tick();
 250:	3b df       	rcall	.-394    	; 0xc8 <Tick>
    }
 252:	fe cf       	rjmp	.-4      	; 0x250 <main+0x32>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
