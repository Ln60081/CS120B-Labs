
lcdtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000047a  0000050e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000512  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000512  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a79  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084d  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e3  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00001db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000410  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000286e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	72 c1       	rjmp	.+740    	; 0x31a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8c d1       	rcall	.+792    	; 0x3dc <main>
  c4:	d8 c1       	rjmp	.+944    	; 0x476 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_init>:
}

void TimerOff()
{
	TimerFlag = 1;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	84 e6       	ldi	r24, 0x64	; 100
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	82 d0       	rcall	.+260    	; 0x1da <delay_ms>
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0d d0       	rcall	.+26     	; 0xf4 <LCD_WriteCommand>
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	0b d0       	rcall	.+22     	; 0xf4 <LCD_WriteCommand>
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	09 d0       	rcall	.+18     	; 0xf4 <LCD_WriteCommand>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	07 d0       	rcall	.+14     	; 0xf4 <LCD_WriteCommand>
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	77 d0       	rcall	.+238    	; 0x1da <delay_ms>
  ec:	00 00       	nop
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_WriteCommand>:
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	8b e2       	ldi	r24, 0x2B	; 43
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2b e2       	ldi	r18, 0x2B	; 43
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	2f 7b       	andi	r18, 0xBF	; 191
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
 11c:	8b e2       	ldi	r24, 0x2B	; 43
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2b e2       	ldi	r18, 0x2B	; 43
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	20 68       	ori	r18, 0x80	; 128
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	00 00       	nop
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	2f 77       	andi	r18, 0x7F	; 127
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	49 d0       	rcall	.+146    	; 0x1da <delay_ms>
 148:	00 00       	nop
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_WriteData>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	8b e2       	ldi	r24, 0x2B	; 43
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2b e2       	ldi	r18, 0x2B	; 43
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	20 64       	ori	r18, 0x40	; 64
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
 170:	88 e2       	ldi	r24, 0x28	; 40
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
 17a:	8b e2       	ldi	r24, 0x2B	; 43
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	2b e2       	ldi	r18, 0x2B	; 43
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	20 68       	ori	r18, 0x80	; 128
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	00 00       	nop
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	2f 77       	andi	r18, 0x7F	; 127
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	1a d0       	rcall	.+52     	; 0x1da <delay_ms>
 1a6:	00 00       	nop
 1a8:	0f 90       	pop	r0
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LCD_Cursor>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	1f 92       	push	r1
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	81 31       	cpi	r24, 0x11	; 17
 1c0:	20 f4       	brcc	.+8      	; 0x1ca <LCD_Cursor+0x1a>
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	81 58       	subi	r24, 0x81	; 129
 1c6:	96 df       	rcall	.-212    	; 0xf4 <LCD_WriteCommand>
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <LCD_Cursor+0x20>
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	81 55       	subi	r24, 0x51	; 81
 1ce:	92 df       	rcall	.-220    	; 0xf4 <LCD_WriteCommand>
 1d0:	00 00       	nop
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <delay_ms>:
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <delay_ms+0x6>
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <delay_ms+0x8>
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <delay_ms+0xa>
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	9e 83       	std	Y+6, r25	; 0x06
 1ea:	8d 83       	std	Y+5, r24	; 0x05
 1ec:	1a 82       	std	Y+2, r1	; 0x02
 1ee:	19 82       	std	Y+1, r1	; 0x01
 1f0:	13 c0       	rjmp	.+38     	; 0x218 <delay_ms+0x3e>
 1f2:	1c 82       	std	Y+4, r1	; 0x04
 1f4:	1b 82       	std	Y+3, r1	; 0x03
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <delay_ms+0x2a>
 1f8:	00 00       	nop
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	9c 81       	ldd	r25, Y+4	; 0x04
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	9c 83       	std	Y+4, r25	; 0x04
 202:	8b 83       	std	Y+3, r24	; 0x03
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	9c 81       	ldd	r25, Y+4	; 0x04
 208:	87 30       	cpi	r24, 0x07	; 7
 20a:	93 40       	sbci	r25, 0x03	; 3
 20c:	ac f3       	brlt	.-22     	; 0x1f8 <delay_ms+0x1e>
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	9a 81       	ldd	r25, Y+2	; 0x02
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	9a 83       	std	Y+2, r25	; 0x02
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	3a 81       	ldd	r19, Y+2	; 0x02
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	9e 81       	ldd	r25, Y+6	; 0x06
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	34 f3       	brlt	.-52     	; 0x1f2 <delay_ms+0x18>
 226:	00 00       	nop
 228:	26 96       	adiw	r28, 0x06	; 6
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <TimerOn>:
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	81 e8       	ldi	r24, 0x81	; 129
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	2b e0       	ldi	r18, 0x0B	; 11
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	88 e8       	ldi	r24, 0x88	; 136
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	2d e7       	ldi	r18, 0x7D	; 125
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	31 83       	std	Z+1, r19	; 0x01
 258:	20 83       	st	Z, r18
 25a:	8f e6       	ldi	r24, 0x6F	; 111
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	22 e0       	ldi	r18, 0x02	; 2
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
 264:	84 e8       	ldi	r24, 0x84	; 132
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	fc 01       	movw	r30, r24
 26a:	11 82       	std	Z+1, r1	; 0x01
 26c:	10 82       	st	Z, r1
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 272:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 276:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 27a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 27e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 282:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 286:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 28a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 28e:	8f e5       	ldi	r24, 0x5F	; 95
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	2f e5       	ldi	r18, 0x5F	; 95
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	20 68       	ori	r18, 0x80	; 128
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
 2a0:	00 00       	nop
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <TimerSet>:



void TimerSet(unsigned long M)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <TimerSet+0x6>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <TimerSet+0x8>
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	69 83       	std	Y+1, r22	; 0x01
 2b6:	7a 83       	std	Y+2, r23	; 0x02
 2b8:	8b 83       	std	Y+3, r24	; 0x03
 2ba:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	9a 81       	ldd	r25, Y+2	; 0x02
 2c0:	ab 81       	ldd	r26, Y+3	; 0x03
 2c2:	bc 81       	ldd	r27, Y+4	; 0x04
 2c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2cc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2d0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 2d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2dc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2e0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 2e8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 2ec:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 2f0:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
}
 2f4:	00 00       	nop
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <TimerISR>:

void TimerISR()
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 312:	00 00       	nop
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 32a:	0f 92       	push	r0
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 34c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 350:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 354:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 358:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	a1 09       	sbc	r26, r1
 360:	b1 09       	sbc	r27, r1
 362:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 366:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 36a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 36e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 372:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 376:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 37a:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 37e:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 382:	89 2b       	or	r24, r25
 384:	8a 2b       	or	r24, r26
 386:	8b 2b       	or	r24, r27
 388:	89 f4       	brne	.+34     	; 0x3ac <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 38a:	bc df       	rcall	.-136    	; 0x304 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 38c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 390:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 394:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 398:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 39c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 3a0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 3a4:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 3a8:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	}
}
 3ac:	00 00       	nop
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3d0:	0f 90       	pop	r0
 3d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <main>:

int main(void)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <main+0x6>
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 3e6:	81 e2       	ldi	r24, 0x21	; 33
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc 01       	movw	r30, r24
 3ec:	10 82       	st	Z, r1
 3ee:	82 e2       	ldi	r24, 0x22	; 34
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
    /* Replace with your application code */
	DDRC = 0xFF; PORTC = 0x00;
 3f8:	87 e2       	ldi	r24, 0x27	; 39
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
 402:	88 e2       	ldi	r24, 0x28	; 40
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	fc 01       	movw	r30, r24
 408:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0xFF;
 40a:	8a e2       	ldi	r24, 0x2A	; 42
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	fc 01       	movw	r30, r24
 412:	20 83       	st	Z, r18
 414:	8b e2       	ldi	r24, 0x2B	; 43
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
	unsigned char oof = 0x00;
 41e:	19 82       	std	Y+1, r1	; 0x01
	LCD_init();
 420:	53 de       	rcall	.-858    	; 0xc8 <LCD_init>
	TimerSet(1000);
 422:	68 ee       	ldi	r22, 0xE8	; 232
 424:	73 e0       	ldi	r23, 0x03	; 3
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 42a:	3e df       	rcall	.-388    	; 0x2a8 <TimerSet>
	//LCD_DisplayString(1, "Hello World!");
    while (1) 
    {
		LCD_Cursor(1);
 42c:	06 df       	rcall	.-500    	; 0x23a <TimerOn>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	bf de       	rcall	.-642    	; 0x1b0 <LCD_Cursor>
		LCD_WriteData(~PINA + '0');
 432:	80 e2       	ldi	r24, 0x20	; 32
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	80 81       	ld	r24, Z
 43a:	9f e2       	ldi	r25, 0x2F	; 47
 43c:	f9 2f       	mov	r31, r25
 43e:	f8 1b       	sub	r31, r24
 440:	8f 2f       	mov	r24, r31
 442:	87 de       	rcall	.-754    	; 0x152 <LCD_WriteData>
		//LCD_DisplayString(1,"Fuck this lab");
		unsigned char tempA = ~PINA;
 444:	80 e2       	ldi	r24, 0x20	; 32
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	80 81       	ld	r24, Z
 44c:	80 95       	com	r24
 44e:	8a 83       	std	Y+2, r24	; 0x02
		if(tempA == 0x01)
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	41 f4       	brne	.+16     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		{
			oof = ~oof;
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	80 95       	com	r24
 45a:	89 83       	std	Y+1, r24	; 0x01
			PORTD = oof;
 45c:	8b e2       	ldi	r24, 0x2B	; 43
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	fc 01       	movw	r30, r24
 464:	20 83       	st	Z, r18
		}
		while(!TimerFlag);
 466:	00 00       	nop
 468:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 46c:	88 23       	and	r24, r24
 46e:	e1 f3       	breq	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		TimerFlag = 0;
 470:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
    }
 474:	dc cf       	rjmp	.-72     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
